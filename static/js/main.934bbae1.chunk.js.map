{"version":3,"sources":["components/Disaster.module.scss","store/disaster.js","api/getDisasterMsg.js","components/Disaster.js","components/DisasterList.js","containers/DisasterContainer.js","App.js","serviceWorker.js","store/index.js","index.js","containers/Disaster.module.scss"],"names":["module","exports","get_message","data","type","initState","loading","error","pageNo","getDisasterMsg","pageNumber","a","req","axios","get","responce","console","log","status","DisasterMsg","row","Title","location_name","create_date","className","styles","Msg","msg","Disaster","props","DisasterList","list","value","map","item","index","key","DisasterContainer","useSelector","state","disaster","useState","search","setSearch","dispatch","useDispatch","getDisasterMessage","useCallback","useEffect","window","addEventListener","onScorll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","round","onChageSearch","e","target","length","filter","v","indexOf","placeholder","onChange","onClick","render","App","Boolean","location","hostname","match","combineReducers","action","pushData","produce","draft","push","store","createStore","reducer","composeWithDevTools","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.934bbae1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item-box\":\"Disaster_item-box__DHSEJ\",\"title\":\"Disaster_title__3rmcc\",\"create-date\":\"Disaster_create-date__3aZk3\",\"location-name\":\"Disaster_location-name__JKmPg\",\"msg\":\"Disaster_msg__39dll\"};","import produce from 'immer';\r\nconst GET_MESSAGE = \"GET_MESSAGE\";\r\n\r\nexport const get_message = (data) => ({\r\n    type: GET_MESSAGE, data\r\n})\r\n\r\nconst initState = {\r\n    loading: false,\r\n    data: [],\r\n    error: false,\r\n    pageNo: 1,\r\n}\r\n\r\nexport default function disaster(state = initState, action) {\r\n    switch (action.type) {\r\n        case GET_MESSAGE:\r\n            const pushData = action.data;\r\n            return produce(\r\n                state,draft =>{\r\n                    draft.data.push(pushData);\r\n                    draft.pageNo = draft.pageNo+1;\r\n                    draft.loading = false;\r\n                    draft.error = false;\r\n                }\r\n            )\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import axios from 'axios';\r\n\r\nconst KEY = \"MpTTK5tgzlmZcNG%2BbB%2Bs0iuaIKortq8%2F1gtsS%2BEEdA8F07g3BngFnTX0Q2ZNNaz8ogDKjZ4XmgawC5Rwr1OlaA%3D%3D\";\r\n\r\nexport const getDisasterMsg = async (pageNumber) =>{\r\n    const req = `http://apis.data.go.kr/1741000/DisasterMsg2/getDisasterMsgList?ServiceKey=${KEY}&pageNo=${pageNumber}&numOfRows=50&type=json&flag=y`;\r\n\r\n    const responce = await axios.get(req);\r\n    console.log(responce.status);\r\n   return responce.data.DisasterMsg[1].row;     \r\n\r\n}","import React from 'react';\r\nimport styles from './Disaster.module.scss';\r\n\r\nconst Disaster = (props) => {\r\n    return (\r\n        <div className={styles['item-box']}>\r\n            <Title location_name={props.location_name} create_date={props.create_date} />\r\n            <Msg msg={props.msg} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction Title({ location_name, create_date }) {\r\n    return (\r\n        <div className={styles['title']}>\r\n            <div className={styles['create-date']}>\r\n                {create_date}\r\n            </div>\r\n            <div className={styles['location-name']}>\r\n                {location_name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Msg({ msg }) {\r\n    return (\r\n        <div className={styles['msg']}>\r\n            {msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Disaster;\r\n","import React from 'react';\r\nimport Disaster from './Disaster';\r\n\r\nconst DisasterList =({value})=>{\r\n\r\n    const list = value.map((data)=>(\r\n        data.map((item,index)=>(\r\n        <Disaster {...item} key={index}/>\r\n        ))\r\n    ))\r\n    return(\r\n        <>\r\n        {list}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisasterList;","import React, { useEffect, useState,useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { get_message } from '../store/disaster';\r\nimport {getDisasterMsg} from '../api/getDisasterMsg';\r\nimport DisasterList from '../components/DisasterList';\r\nimport styles from './Disaster.module.scss';\r\n\r\n\r\n\r\nconst DisasterContainer = () => {\r\n\r\n    const { loading, data, pageNo, error } = useSelector(state => state.disaster);\r\n    const [search,setSearch] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const getDisasterMessage = useCallback(async () => {\r\n        const responce = await getDisasterMsg(pageNo);\r\n        dispatch(get_message(responce));\r\n        console.log(responce);\r\n    },[dispatch]);\r\n\r\n    useEffect(()=>{\r\n    window.addEventListener('scroll',onScorll,true);\r\n    },[])\r\n\r\n    useEffect(() => {\r\n         getDisasterMessage();\r\n    },[getDisasterMessage]);\r\n\r\n\r\n    const onScorll =()=>{\r\n        let scrollHeight = Math.max(document.documentElement.scrollHeight,document.body.scrollHeight);\r\n        let scrollTop = Math.max (document.documentElement.scrollTop,document.body.scrollTop);\r\n        let clientHeight = document.documentElement.clientHeight;\r\n        console.log(scrollHeight);\r\n        console.log(scrollTop + clientHeight);\r\n        let height = Math.round(scrollTop+ clientHeight);\r\n        if(height=== scrollHeight){\r\n            console.log(\"페이지 끝\");\r\n            getDisasterMessage();\r\n        }\r\n    }\r\n\r\n    const onChageSearch =useCallback((e)=>{\r\n        setSearch(e.target.value);\r\n    },[setSearch]);\r\n\r\n    const render=()=>{\r\n        const list = data.map((item,index) =>{\r\n            return item.filter(v =>{\r\n                return (\r\n                    v.location_name.indexOf(search) !==-1\r\n                )\r\n            })\r\n        })\r\n        return (\r\n            <>\r\n            <input className={styles['input']} type=\"text\" placeholder=\"지역을 검색하세요\" value={search} onChange={onChageSearch} ></input>\r\n            <DisasterList value={list} pageNo={pageNo}/>\r\n            <div className={styles['btn']} onClick ={getDisasterMessage}>\r\n                더보기\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className={styles['list']}>\r\n            {data.length===0 ? \"로딩중입니다~\" :render()}\r\n        </div>\r\n        )\r\n}\r\nexport default DisasterContainer;","import React from 'react';\r\nimport './App.css';\r\nimport DisasterContainer from './containers/DisasterContainer';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DisasterContainer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport disaster from './disaster';\r\n\r\nexport default combineReducers({\r\n    disaster,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from './store/index';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nconst store = createStore(reducer,composeWithDevTools());\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Disaster_list__2JDcq\",\"input\":\"Disaster_input__1XxI4\",\"btn\":\"Disaster_btn__3dYB3\"};"],"sourceRoot":""}